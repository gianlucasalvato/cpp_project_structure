#!/bin/bash

. `dirname $0`/functions "$0"

# cycle through the argument list

while [[ $# > 0 ]]; do

	option="$1"

	case $option in
		-y | --yes		) auto_reply="-y"					;;
		-n | --no		) auto_reply="-n"					;;
		-d | --directory) shift; options+="--directory $1 "	;;
		-v | --verbose	) shift; verbose_level=$1 			;; 
 		-h | --help		) print_usage && exit 0				;;
 		-* 				) ERROR bad_option "$option"		;;
		--				) shift; break						;;
		*				) break;							;;
	esac
	shift

done

# post-parsing setup

maker="$script_path/add_file"

lv_level="$verbose_level"
let "lv_level--"
options+="--verbose $lv_level "

# actual script functions

# actual script

template='project'

errors=0

tree_file="$1"

exec 7<&0

while IFS='' read -r line; do

	if [ "$line" != "" ]; then

		[ "${line:0:1}" == "#" ] && continue
	
		cout "\nProcessing '$line'... "

		if [ "${line:0:1}" == "@" ]; then  
			
			template="${line:1}"
			vout 2 "\e[34;3m\nSelecting template structure:\e[m $template." 
			options="${options//--template*/}"
			options+="--template $template "

		else
		
			CMD="$maker $auto_reply $options"
			vout 2 "\n\e[33;1mexec:\e[m '$CMD $line'... "
			
			$CMD "$line" <&7
			
			[[ $? == 0 ]] && vout 2 "\e[32;1mdone" || { vout 2 "\e[31;1mfail" && let errors++; }

		fi
		
		cout "\e[m"

	fi

done < "$tree_file"



{ [[ $errors == 0 ]] || eout "\e[31;1m\n$errors translations failed!\e[m"; } && cout "\n"

exit 0