#!/bin/bash

. `dirname $0`/functions "$0"

# if no arguments, exit (you may wanna change this)

[[ $# == 0 ]] && print_usage && exit 0

# cycle through the argument list

base="$script_path/.."
include_dir="$base/include"
tree_dir="$base/tree"
template_s="$tree_dir/project/source.t"

while [[ $# > 0 ]]; do

	option="$1"

	case $option in
		-y | --yes		) auto_reply="-y"					;;
		-n | --no		) auto_reply="-n"					;;
		-t | --template	) shift; template="$1"				;;
		-d | --directory) shift; include_dir="$1"			;;
		-v | --verbose	) shift; verbose_level=$1			;; 
 		-h | --help		) print_usage && exit 0				;;
 		-* 				) ERROR bad_option "$option"		;;
		--				) shift; break						;;
		*				) break;							;;
	esac
	shift

done

# post-parsing setup

file_type=${1##*.}

file_name="$include_dir/$1"
file_path="${file_name%\/*}"


overwrite="-y"


[[ "$file_name" == "" ]] 	&& ERROR no_input
[[ -d "$file_name" ]] 		&& ERROR is_a_directory "$file_name"

if [ -f "$file_name" ]; then

	if [ "$auto_reply" == "-n" ]; then
		
		cout "\nSkip existing \e[33m$file_name\e[m. "
		exit 0
		
	elif [ "$auto_reply" != "-y" ]; then
	
		eout "\e[33m\n$file_name\e[m already exists! "
		eout "\e[33mContinue anyway?\e[m\n"
		eout "(anything but 'y' will stop me) "
		read char
		overwrite="-$char"
		eout "\n" 
	
	fi

fi

# actual script

if [ "$overwrite" != "-y" ]; then

	cout "\e[31;1mCanceled.\e[m\n"
	exit 0

else

	errors=0

	templates="${template//\// }"
	for template_d in $templates; do 
		if [ -f "$tree_dir/$template_d.t" ]; then 
			. "$tree_dir/$template_d.t"
			vout 2 "\n\e[34;3mSourcing template:\e[m $template_d"
		fi
	done

	template_file="$tree_dir/$template_d.t.$file_type"

	[[ ! -f "$template_file" ]] && ERROR no_template "$template_file"	

	mkdir -p "$file_path"
	rm "$file_name"
	touch "$file_name"
		
	cat "$template_file" > "$file_name"
	
	

	for pair in "${project[@]}"; do
		key="${pair%%:*}"
		value="${pair##*:}"
		
		vout 2 "\nSubstituting key "

		if [[ "$key" == "LICENSE" ]]; then
			vout 2 "$key... "

			CMD="perl -0777 -pe s/\"\@$key\@\"/\"$LICENSE_TEXT\"/igs -i \"$file_name\""
			vout 3 "\e[33;1m\nexec:\e[m '$CMD'... "
			LICENSE_TEXT="`sed -e 's/[\&/]/\\&/g' -e 's/$/\\\n/' $value | tr -d '\n'`"
			
			perl -0777 -pe s/"\@$key\@"/"$LICENSE_TEXT"/igs -i "$file_name"
			pass=$?
			
			if [ $pass != 0 ]; then
				vout 3 "\e[31;1mFAILED\e[m"
				let errors++
				continue; 
			fi
			
			vout 3 "\e[32;1mdone" 
			CMD="sed -i -e s/\&/\\//g \"$file_name\""
			
			vout 3 "\e[33;1m\nexec:\e[m '$CMD'... "
			sed -i -e s/\&/\\//g "$file_name"
			pass=$?
			rm "$file_name-e"

		else
			vout 2 "$key with '$value'... "
			CMD="sed -i -e s/\"@$key@\"/\"$value\"/g \"$file_name\""
			
			vout 3 "\e[33;1m\nexec:\e[m '$CMD'... "
			sed -i -e s/"@$key@"/"$value"/g "$file_name"
			pass=$?
			rm "$file_name-e"
		fi

		[ $pass == 0 ] && vout 3 "\e[32;1mdone" || { vout 3 "\e[31;1mFAILED" && let errors++; }

		cout "\e[m"
		
	done

	vout 3 "\n"

fi

{ [[ $errors == 0 ]] || eout "\e[31;1m\n$errors translations failed!\e[m"; }

exit 0